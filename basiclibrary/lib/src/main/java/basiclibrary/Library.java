/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {


        System.out.println("dice roll " + roll(5));


        int[] arr = {1,2,3,1};
        System.out.println("duplicated check " + containsDuplicates(arr));



        System.out.println("average method " + calculatingAverages(arr));





        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        System.out.println("array of the lowest avg " + Arrays.toString(arrOfArrMinAvg(weeklyMonthTemperatures)));



        System.out.println(analyzingWeatherData(weeklyMonthTemperatures));


        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");


        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");

    }

    public static ArrayList roll(int n){
        ArrayList<Integer> resultArr = new ArrayList<Integer>();
        int lower = 1;
        int high = 6;
        for (int i = 0; i < n; i++) {
          int rnd = (int) (Math.random()* (high - lower)) + 1;
          resultArr.add(rnd);
        }
        return resultArr;
    }

    public static boolean containsDuplicates(int[] arr){
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
               if (i != j ){
                   if (arr[i] == arr[j]){
                       return true;
                   }
               }
            }
        }
        return false;
    }


    public static double calculatingAverages(int[] arr){
        double avg = 0;
        int sum = 0;
        for (int j : arr) {
            sum += j;
        }
        avg = (double)sum / arr.length;
        return avg;
    }

    public static int[] arrOfArrMinAvg(int[][] arr){
        int[] arrOfLeast = arr[0];
        for (int[] ints : arr) {
            if (calculatingAverages(ints) < calculatingAverages(arrOfLeast)) {
                arrOfLeast = ints;
            }


        }
        return arrOfLeast;
    }


    public static String analyzingWeatherData(int[][] arr){
        int highest = arr[0][0] ;
        int lowest = arr[0][0];
        HashSet<Integer> temp = new HashSet<Integer>();

        for (int[] ints : arr) {
            for (int anInt : ints) {
                if (anInt > highest) {
                    highest = anInt;
                }
                if (anInt < lowest) {
                    lowest = anInt;
                }
                temp.add(anInt);
            }
        }
        String neverSaw = "";
        for (int i = lowest; i < highest; i++) {
            if (!temp.contains(i)){
                neverSaw+= ("\nnever saw temperature "+i);
            }
        }

        System.out.println("highest temperature: " + highest);
        System.out.println("lowest temperature: " + lowest);

        return neverSaw;
    }

    public static String tally(List<String> votes){
        HashMap<String,Integer> newOrderedVotes = new HashMap<String,Integer>();
        String winner = "";
        int maxVotes = 0;

        for (String vote : votes) {
            if (!newOrderedVotes.containsKey(vote)) {
                newOrderedVotes.put(vote, 1);
            } else {newOrderedVotes.put(vote ,newOrderedVotes.get(vote)+1 );

            }
        }
        for (Map.Entry<String, Integer> entry : newOrderedVotes.entrySet()){
            if (entry.getValue() > maxVotes){
                maxVotes = entry.getValue();
                winner = entry.getKey();
            }
        }
        return winner;
    }

}
